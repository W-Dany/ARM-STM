


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ;*******************************************************
                       *************************************************
    3 00000000         ;                                                uC/OS-I
                       II
    4 00000000         ;                                          The Real-Time
                        Kernel
    5 00000000         ;
    6 00000000         ;
    7 00000000         ;                         (c) Copyright 2009-2013; Micri
                       um, Inc.; Weston, FL
    8 00000000         ;                    All rights reserved.  Protected by 
                       international copyright laws.
    9 00000000         ;
   10 00000000         ;                                           ARM Cortex-M
                       4 Port
   11 00000000         ;
   12 00000000         ; File      : OS_CPU_A.ASM
   13 00000000         ; Version   : V3.04.04
   14 00000000         ; By        : JJL
   15 00000000         ;             BAN
   16 00000000         ;
   17 00000000         ; For       : ARMv7 Cortex-M4
   18 00000000         ; Mode      : Thumb-2 ISA
   19 00000000         ; Toolchain : RealView Development Suite
   20 00000000         ;             RealView Microcontroller Development Kit (
                       MDK)
   21 00000000         ;             ARM Developer Suite (ADS)
   22 00000000         ;             Keil uVision
   23 00000000         ;*******************************************************
                       *************************************************
   24 00000000         ;
   25 00000000         
   26 00000000         ;*******************************************************
                       *************************************************
   27 00000000         ;                                          PUBLIC FUNCTI
                       ONS
   28 00000000         ;*******************************************************
                       *************************************************
   29 00000000         
   30 00000000                 IMPORT           OSRunning   ; External referenc
                                                            es
   31 00000000                 IMPORT           OSPrioCur
   32 00000000                 IMPORT           OSPrioHighRdy
   33 00000000                 IMPORT           OSTCBCurPtr
   34 00000000                 IMPORT           OSTCBHighRdyPtr
   35 00000000                 IMPORT           OSIntExit
   36 00000000                 IMPORT           OSTaskSwHook
   37 00000000                 IMPORT           OS_CPU_ExceptStkBase
   38 00000000         
   39 00000000         
   40 00000000                 EXPORT           OSStartHighRdy ; Functions decl
                                                            ared in this file
   41 00000000                 EXPORT           OSCtxSw
   42 00000000                 EXPORT           OSIntCtxSw
   43 00000000         ;    EXPORT  OS_CPU_PendSVHandler
   44 00000000                 EXPORT           PendSV_Handler
   45 00000000         
   46 00000000                 IF               {FPU} != "SoftVFP"



ARM Macro Assembler    Page 2 


   47 00000000                 EXPORT           OS_CPU_FP_Reg_Push
   48 00000000                 EXPORT           OS_CPU_FP_Reg_Pop
   49 00000000                 ENDIF
   50 00000000         
   51 00000000         
   52 00000000         ;*******************************************************
                       *************************************************
   53 00000000         ;                                               EQUATES
   54 00000000         ;*******************************************************
                       *************************************************
   55 00000000         
   56 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   57 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; System priority r
                                                            egister (priority 1
                                                            4).
   58 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   59 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   60 00000000         
   61 00000000         
   62 00000000         ;*******************************************************
                       *************************************************
   63 00000000         ;                                     CODE GENERATION DI
                       RECTIVES
   64 00000000         ;*******************************************************
                       *************************************************
   65 00000000         
   66 00000000         ;   PRESERVE8
   67 00000000         ;   THUMB
   68 00000000         
   69 00000000         ;   AREA CODE, CODE, READONLY
   70 00000000         
   71 00000000                 PRESERVE8
   72 00000000         
   73 00000000                 AREA             |.text|, CODE, READONLY
   74 00000000                 THUMB
   75 00000000         
   76 00000000         
   77 00000000         ;*******************************************************
                       *************************************************
   78 00000000         ;                                   FLOATING POINT REGIS
                       TERS PUSH
   79 00000000         ;                             void  OS_CPU_FP_Reg_Push (
                       CPU_STK  *stkPtr)
   80 00000000         ;
   81 00000000         ; Note(s) : 1) This function saves S0-S31, and FPSCR reg
                       isters of the Floating Point Unit.
   82 00000000         ;
   83 00000000         ;           2) Pseudo-code is:



ARM Macro Assembler    Page 3 


   84 00000000         ;              a) Get FPSCR register value;
   85 00000000         ;              b) Push value on process stack;
   86 00000000         ;              c) Push remaining regs S0-S31 on process 
                       stack;
   87 00000000         ;              d) Update OSTCBCurPtr->StkPtr;
   88 00000000         ;*******************************************************
                       *************************************************
   89 00000000         
   90 00000000                 IF               {FPU} != "SoftVFP"
   91 00000000         
   92 00000000         OS_CPU_FP_Reg_Push
   93 00000000 F3EF 8109       MRS              R1, PSP     ; PSP is process st
                                                            ack pointer
   94 00000004 B141            CBZ              R1, OS_CPU_FP_nosave ; Skip FP 
                                                            register save the f
                                                            irst time
   95 00000006         
   96 00000006 EEF1 1A10       VMRS             R1, FPSCR
   97 0000000A F840 1D04       STR              R1, [R0, #-4]!
   98 0000000E ED20 0A20       VSTMDB           R0!, {S0-S31}
   99 00000012 493B            LDR              R1, =OSTCBCurPtr
  100 00000014 680A            LDR              R2, [R1]
  101 00000016 6010            STR              R0, [R2]
  102 00000018         OS_CPU_FP_nosave
  103 00000018 4770            BX               LR
  104 0000001A         
  105 0000001A                 ENDIF
  106 0000001A         
  107 0000001A         
  108 0000001A         ;*******************************************************
                       *************************************************
  109 0000001A         ;                                   FLOATING POINT REGIS
                       TERS POP
  110 0000001A         ;                             void  OS_CPU_FP_Reg_Pop (C
                       PU_STK  *stkPtr)
  111 0000001A         ;
  112 0000001A         ; Note(s) : 1) This function restores S0-S31, and FPSCR 
                       registers of the Floating Point Unit.
  113 0000001A         ;
  114 0000001A         ;           2) Pseudo-code is:
  115 0000001A         ;              a) Restore regs S0-S31 of new process sta
                       ck;
  116 0000001A         ;              b) Restore FPSCR reg value
  117 0000001A         ;              c) Update OSTCBHighRdyPtr->StkPtr pointer
                        of new proces stack;
  118 0000001A         ;*******************************************************
                       *************************************************
  119 0000001A         
  120 0000001A                 IF               {FPU} != "SoftVFP"
  121 0000001A         
  122 0000001A         OS_CPU_FP_Reg_Pop
  123 0000001A ECB0 0A20       VLDMIA           R0!, {S0-S31}
  124 0000001E C802            LDMIA            R0!, {R1}
  125 00000020 EEE1 1A10       VMSR             FPSCR, R1
  126 00000024 4937            LDR              R1, =OSTCBHighRdyPtr
  127 00000026 680A            LDR              R2, [R1]
  128 00000028 6010            STR              R0, [R2]
  129 0000002A 4770            BX               LR
  130 0000002C         



ARM Macro Assembler    Page 4 


  131 0000002C                 ENDIF
  132 0000002C         
  133 0000002C         
  134 0000002C         ;*******************************************************
                       *************************************************
  135 0000002C         ;                                         START MULTITAS
                       KING
  136 0000002C         ;                                      void OSStartHighR
                       dy(void)
  137 0000002C         ;
  138 0000002C         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
  139 0000002C         ;              the first task to start.
  140 0000002C         ;
  141 0000002C         ;           2) OSStartHighRdy() MUST:
  142 0000002C         ;              a) Setup PendSV exception priority to low
                       est;
  143 0000002C         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
  144 0000002C         ;              c) Set the main stack to OS_CPU_ExceptStk
                       Base
  145 0000002C         ;              d) Trigger PendSV exception;
  146 0000002C         ;              e) Enable interrupts (tasks will run with
                        interrupts enabled).
  147 0000002C         ;*******************************************************
                       *************************************************
  148 0000002C         
  149 0000002C         OSStartHighRdy
  150 0000002C B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  151 0000002E F64E 5022 
              F2CE 0000        MOV32            R0, NVIC_SYSPRI14 ; Set the Pen
                                                            dSV exception prior
                                                            ity
  152 00000036 F240 01FF 
              F2C0 0100        MOV32            R1, NVIC_PENDSV_PRI
  153 0000003E 7001            STRB             R1, [R0]
  154 00000040         
  155 00000040 F240 0000 
              F2C0 0000        MOV32            R0, OS_CPU_ExceptStkBase ; Init
                                                            ialize the MSP to t
                                                            he OS_CPU_ExceptStk
                                                            Base
  156 00000048 6801            LDR              R1, [R0]
  157 0000004A F381 8808       MSR              MSP, R1
  158 0000004E         
  159 0000004E F240 0000 
              F2C0 0000        MOV32            R0, OSPrioCur ; OSPrioCur   = O
                                                            SPrioHighRdy;
  160 00000056 F240 0100 
              F2C0 0100        MOV32            R1, OSPrioHighRdy
  161 0000005E 780A            LDRB             R2, [R1]
  162 00000060 7002            STRB             R2, [R0]
  163 00000062         
  164 00000062 F240 0500 
              F2C0 0500        MOV32            R5, OSTCBCurPtr
  165 0000006A F240 0100 
              F2C0 0100        MOV32            R1, OSTCBHighRdyPtr ; OSTCBCurP



ARM Macro Assembler    Page 5 


                                                            tr = OSTCBHighRdyPt
                                                            r;
  166 00000072 680A            LDR              R2, [R1]
  167 00000074 602A            STR              R2, [R5]
  168 00000076         
  169 00000076 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            RdyPtr->StkPtr;
  170 00000078 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  171 0000007C         
  172 0000007C F3EF 8014       MRS              R0, CONTROL
  173 00000080 F040 0002       ORR              R0, R0, #2
  174 00000084 F380 8814       MSR              CONTROL, R0
  175 00000088 F3BF 8F6F       ISB                          ; Sync instruction 
                                                            stream
  176 0000008C         
  177 0000008C E8BD 0FF0       LDMFD            SP!, {R4-R11} ; Restore r4-11 f
                                                            rom new process sta
                                                            ck
  178 00000090 BC0F            LDMFD            SP!, {R0-R3} ; Restore r0, r3
  179 00000092 E8BD 5000       LDMFD            SP!, {R12, LR} 
                                                            ; Load R12 and LR
  180 00000096 BC06            LDMFD            SP!, {R1, R2} ; Load PC and dis
                                                            card xPSR
  181 00000098 B662            CPSIE            I
  182 0000009A 4708            BX               R1
  183 0000009C         
  184 0000009C         
  185 0000009C         ;*******************************************************
                       *************************************************
  186 0000009C         ;                       PERFORM A CONTEXT SWITCH (From t
                       ask level) - OSCtxSw()
  187 0000009C         ;
  188 0000009C         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  189 0000009C         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  190 0000009C         ;*******************************************************
                       *************************************************
  191 0000009C         
  192 0000009C         OSCtxSw
  193 0000009C 481A            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  194 0000009E F04F 5180       LDR              R1, =NVIC_PENDSVSET
  195 000000A2 6001            STR              R1, [R0]
  196 000000A4 4770            BX               LR
  197 000000A6         
  198 000000A6         
  199 000000A6         ;*******************************************************
                       *************************************************
  200 000000A6         ;                   PERFORM A CONTEXT SWITCH (From inter
                       rupt level) - OSIntCtxSw()
  201 000000A6         ;
  202 000000A6         ; Note(s) : 1) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  203 000000A6         ;              the result of an interrupt.  This functio



ARM Macro Assembler    Page 6 


                       n simply triggers a PendSV exception which will
  204 000000A6         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  205 000000A6         ;*******************************************************
                       *************************************************
  206 000000A6         
  207 000000A6         OSIntCtxSw
  208 000000A6 4818            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  209 000000A8 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  210 000000AC 6001            STR              R1, [R0]
  211 000000AE 4770            BX               LR
  212 000000B0         
  213 000000B0         
  214 000000B0         ;*******************************************************
                       *************************************************
  215 000000B0         ;                                       HANDLE PendSV EX
                       CEPTION
  216 000000B0         ;                                   void OS_CPU_PendSVHa
                       ndler(void)
  217 000000B0         ;
  218 000000B0         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  219 000000B0         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
  220 000000B0         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  221 000000B0         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
  222 000000B0         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  223 000000B0         ;              a thread or occurs due to an interrupt or
                        exception.
  224 000000B0         ;
  225 000000B0         ;           2) Pseudo-code is:
  226 000000B0         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  227 000000B0         ;              b) Save remaining regs r4-r11 on process 
                       stack;
  228 000000B0         ;              c) Save the process SP in its TCB, OSTCBC
                       urPtr->OSTCBStkPtr = SP;
  229 000000B0         ;              d) Call OSTaskSwHook();
  230 000000B0         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  231 000000B0         ;              f) Get current ready thread TCB, OSTCBCur
                       Ptr = OSTCBHighRdyPtr;
  232 000000B0         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdyPtr->OSTCBStkPtr;
  233 000000B0         ;              h) Restore R4-R11 from new process stack;
                       
  234 000000B0         ;              i) Perform exception return which will re
                       store remaining context.
  235 000000B0         ;
  236 000000B0         ;           3) On entry into PendSV handler:
  237 000000B0         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  238 000000B0         ;                 xPSR, PC, LR, R12, R0-R3



ARM Macro Assembler    Page 7 


  239 000000B0         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  240 000000B0         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  241 000000B0         ;              d) OSTCBCurPtr      points to the OS_TCB 
                       of the task to suspend
  242 000000B0         ;                 OSTCBHighRdyPtr  points to the OS_TCB 
                       of the task to resume
  243 000000B0         ;
  244 000000B0         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  245 000000B0         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  246 000000B0         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  247 000000B0         ;*******************************************************
                       *************************************************
  248 000000B0         ;OS_CPU_PendSVHandler
  249 000000B0         PendSV_Handler
  250 000000B0 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  251 000000B2 F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  252 000000B6 E920 0FF0       STMFD            R0!, {R4-R11} ; Save remaining 
                                                            regs r4-11 on proce
                                                            ss stack
  253 000000BA         
  254 000000BA F240 0500 
              F2C0 0500        MOV32            R5, OSTCBCurPtr ; OSTCBCurPtr->
                                                            OSTCBStkPtr = SP;
  255 000000C2 682E            LDR              R6, [R5]
  256 000000C4 6030            STR              R0, [R6]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  257 000000C6         
  258 000000C6         ; At this point, entire context of process has been save
                       d
  259 000000C6 4674            MOV              R4, LR      ; Save LR exc_retur
                                                            n value
  260 000000C8 F7FF FFFE       BL               OSTaskSwHook ; OSTaskSwHook();
  261 000000CC         
  262 000000CC F240 0000 
              F2C0 0000        MOV32            R0, OSPrioCur ; OSPrioCur   = O
                                                            SPrioHighRdy;
  263 000000D4 F240 0100 
              F2C0 0100        MOV32            R1, OSPrioHighRdy
  264 000000DC 780A            LDRB             R2, [R1]
  265 000000DE 7002            STRB             R2, [R0]
  266 000000E0         
  267 000000E0 F240 0100 
              F2C0 0100        MOV32            R1, OSTCBHighRdyPtr ; OSTCBCurP
                                                            tr = OSTCBHighRdyPt
                                                            r;
  268 000000E8 680A            LDR              R2, [R1]
  269 000000EA 602A            STR              R2, [R5]
  270 000000EC         
  271 000000EC F044 0EF4       ORR              LR, R4, #0xF4 ; Ensure exceptio
                                                            n return uses proce



ARM Macro Assembler    Page 8 


                                                            ss stack
  272 000000F0 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            RdyPtr->StkPtr;
  273 000000F2 E8B0 0FF0       LDMFD            R0!, {R4-R11} ; Restore r4-11 f
                                                            rom new process sta
                                                            ck
  274 000000F6 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  275 000000FA B662            CPSIE            I
  276 000000FC 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  277 000000FE         
  278 000000FE 00 00           ALIGN
  279 00000100         
  280 00000100                 END
              00000000 
              00000000 
              E000ED04 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\os_cpu_a.d -o.\objects\os_cpu_a.o -I.\RTE\_demo -I"D:
\Program Files (x86)\Keil5_24\ARM\PACK\Keil\STM32F4xx_DFP\2.11.0\Drivers\CMSIS\
Device\ST\STM32F4xx\Include" -I"D:\Program Files (x86)\Keil5_24\ARM\CMSIS\Inclu
de" --predefine="__UVISION_VERSION SETA 524" --predefine="STM32F429xx SETA 1" -
-list=.\listings\os_cpu_a.lst ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a
.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 73 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
   Uses
      None
Comment: .text unused
OSCtxSw 0000009C

Symbol: OSCtxSw
   Definitions
      At line 192 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
   Uses
      At line 41 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 000000A6

Symbol: OSIntCtxSw
   Definitions
      At line 207 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
   Uses
      At line 42 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
Comment: OSIntCtxSw used once
OSStartHighRdy 0000002C

Symbol: OSStartHighRdy
   Definitions
      At line 149 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
   Uses
      At line 40 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
Comment: OSStartHighRdy used once
OS_CPU_FP_Reg_Pop 0000001A

Symbol: OS_CPU_FP_Reg_Pop
   Definitions
      At line 122 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
   Uses
      At line 48 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
Comment: OS_CPU_FP_Reg_Pop used once
OS_CPU_FP_Reg_Push 00000000

Symbol: OS_CPU_FP_Reg_Push
   Definitions
      At line 92 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
   Uses
      At line 47 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
Comment: OS_CPU_FP_Reg_Push used once
OS_CPU_FP_nosave 00000018

Symbol: OS_CPU_FP_nosave
   Definitions
      At line 102 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
   Uses
      At line 94 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
Comment: OS_CPU_FP_nosave used once
PendSV_Handler 000000B0

Symbol: PendSV_Handler



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 249 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
   Uses
      At line 44 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
Comment: PendSV_Handler used once
8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 56 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
   Uses
      At line 193 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
      At line 208 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 59 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
   Uses
      At line 194 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
      At line 209 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm

NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 58 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
   Uses
      At line 152 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 57 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
   Uses
      At line 151 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 35 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
   Uses
      None
Comment: OSIntExit unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 31 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
   Uses
      At line 159 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
      At line 262 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm

OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 32 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
   Uses
      At line 160 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
      At line 263 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm

OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 30 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
   Uses
      None
Comment: OSRunning unused
OSTCBCurPtr 00000000

Symbol: OSTCBCurPtr
   Definitions
      At line 33 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
   Uses
      At line 99 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
      At line 164 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
      At line 254 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm

OSTCBHighRdyPtr 00000000

Symbol: OSTCBHighRdyPtr
   Definitions
      At line 34 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
   Uses
      At line 126 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
      At line 165 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
      At line 267 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm

OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 36 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

   Uses
      At line 260 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
Comment: OSTaskSwHook used once
OS_CPU_ExceptStkBase 00000000

Symbol: OS_CPU_ExceptStkBase
   Definitions
      At line 37 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
   Uses
      At line 155 in file ..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\os_cpu_a.asm
Comment: OS_CPU_ExceptStkBase used once
8 symbols
355 symbols in table
